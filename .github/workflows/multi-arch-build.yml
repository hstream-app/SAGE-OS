name: Multi-Architecture Build

on:
  push:
    branches: [ main, origin, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      architectures:
        description: 'Architectures to build (comma-separated)'
        required: false
        default: 'aarch64,x86_64,riscv64,arm'
      platforms:
        description: 'Platforms to build (comma-separated)'
        required: false
        default: 'rpi4,rpi5,x86_64'
      formats:
        description: 'Image formats to build (comma-separated)'
        required: false
        default: 'kernel,iso,sdcard'
      enable_ai:
        description: 'Enable AI subsystem'
        required: false
        default: 'OFF'
        type: choice
        options:
        - 'ON'
        - 'OFF'

env:
  PROJECT_NAME: SAGE-OS
  VERSION: 0.1.0

jobs:
  # Matrix build for different architectures and platforms
  build-matrix:
    name: Build ${{ matrix.arch }}-${{ matrix.platform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [aarch64, x86_64, riscv64, arm]
        platform: [rpi4, rpi5, x86_64, generic]
        exclude:
          # Exclude incompatible combinations
          - arch: x86_64
            platform: rpi4
          - arch: x86_64
            platform: rpi5
          - arch: aarch64
            platform: x86_64
          - arch: arm
            platform: x86_64
          - arch: riscv64
            platform: rpi4
          - arch: riscv64
            platform: rpi5
          - arch: riscv64
            platform: x86_64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc-aarch64-linux-gnu \
          gcc-arm-linux-gnueabihf \
          gcc-riscv64-linux-gnu \
          gcc-x86-64-linux-gnu \
          qemu-system-arm \
          qemu-system-x86 \
          qemu-system-misc \
          genisoimage \
          dosfstools \
          make

    - name: Cache build dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache
          build/cache
        key: ${{ runner.os }}-build-${{ matrix.arch }}-${{ hashFiles('**/Makefile*') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ matrix.arch }}-
          ${{ runner.os }}-build-

    - name: Build kernel
      run: |
        make -f Makefile.multi-arch kernel \
          ARCH=${{ matrix.arch }} \
          PLATFORM=${{ matrix.platform }} \
          ENABLE_AI=${{ github.event.inputs.enable_ai || 'OFF' }} \
          ENABLE_DEBUG=ON

    - name: Build ISO image
      if: matrix.arch != 'arm'  # Skip ARM32 for ISO builds
      run: |
        make -f Makefile.multi-arch iso \
          ARCH=${{ matrix.arch }} \
          PLATFORM=${{ matrix.platform }}

    - name: Build SD card image
      if: contains(matrix.platform, 'rpi')  # Only for Raspberry Pi platforms
      run: |
        make -f Makefile.multi-arch sdcard \
          ARCH=${{ matrix.arch }} \
          PLATFORM=${{ matrix.platform }}

    - name: Test with QEMU
      timeout-minutes: 5
      run: |
        timeout 30s make -f Makefile.multi-arch qemu \
          ARCH=${{ matrix.arch }} \
          PLATFORM=${{ matrix.platform }} || true

    - name: Generate build info
      run: |
        make -f Makefile.multi-arch info \
          ARCH=${{ matrix.arch }} \
          PLATFORM=${{ matrix.platform }} > build-info-${{ matrix.arch }}-${{ matrix.platform }}.txt

    - name: Upload kernel artifact
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ matrix.arch }}-${{ matrix.platform }}
        path: |
          build/${{ matrix.arch }}/kernel.img
          build/${{ matrix.arch }}/kernel.elf
          build/${{ matrix.arch }}/kernel.map
          build-info-${{ matrix.arch }}-${{ matrix.platform }}.txt
        retention-days: 30

    - name: Upload ISO artifact
      if: matrix.arch != 'arm'
      uses: actions/upload-artifact@v4
      with:
        name: iso-${{ matrix.arch }}-${{ matrix.platform }}
        path: dist/${{ matrix.arch }}/*.iso
        retention-days: 30

    - name: Upload SD card artifact
      if: contains(matrix.platform, 'rpi')
      uses: actions/upload-artifact@v4
      with:
        name: sdcard-${{ matrix.arch }}-${{ matrix.platform }}
        path: dist/${{ matrix.arch }}/*-sdcard.img
        retention-days: 30

  # Docker multi-arch build
  docker-build:
    name: Docker Multi-Arch Build
    runs-on: ubuntu-latest
    needs: build-matrix
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Login to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Login to GitHub Container Registry
      if: github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Prepare Docker context
      run: |
        mkdir -p docker-context/build
        for arch in aarch64 x86_64 riscv64 arm; do
          mkdir -p docker-context/build/$arch
          if [ -d "kernel-$arch-"* ]; then
            cp kernel-$arch-*/kernel.img docker-context/build/$arch/ 2>/dev/null || true
          fi
        done
        cp config*.txt docker-context/ 2>/dev/null || true

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: docker-context
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: ${{ github.event_name == 'push' }}
        tags: |
          ghcr.io/${{ github.repository_owner }}/sage-os:latest
          ghcr.io/${{ github.repository_owner }}/sage-os:${{ env.VERSION }}
          ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'sage-os:latest' || '' }}
          ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && format('sage-os:{0}', env.VERSION) || '' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Create release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-matrix, docker-build]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Organize kernel images
        for artifact in kernel-*; do
          if [ -d "$artifact" ]; then
            arch_platform=$(echo "$artifact" | sed 's/kernel-//')
            cp "$artifact/kernel.img" "release-assets/sage-os-${{ env.VERSION }}-${arch_platform}.img" 2>/dev/null || true
          fi
        done
        
        # Organize ISO images
        for artifact in iso-*; do
          if [ -d "$artifact" ]; then
            cp "$artifact"/*.iso release-assets/ 2>/dev/null || true
          fi
        done
        
        # Organize SD card images
        for artifact in sdcard-*; do
          if [ -d "$artifact" ]; then
            cp "$artifact"/*-sdcard.img release-assets/ 2>/dev/null || true
          fi
        done
        
        # Create checksums
        cd release-assets
        sha256sum * > SHA256SUMS
        cd ..

    - name: Create release notes
      run: |
        cat > release-notes.md << 'EOF'
        # SAGE OS ${{ env.VERSION }}
        
        ## Multi-Architecture Release
        
        This release includes builds for multiple architectures and platforms:
        
        ### Supported Architectures
        - **aarch64** (ARM64) - Raspberry Pi 4/5, generic ARM64
        - **x86_64** (Intel/AMD) - Generic x86_64 systems
        - **riscv64** (RISC-V) - RISC-V 64-bit systems
        - **arm** (ARM32) - Raspberry Pi 3, generic ARM32
        
        ### Image Formats
        - **Kernel Images** (.img) - Raw kernel binaries for direct boot
        - **ISO Images** (.iso) - Bootable ISO images for x86_64 and aarch64
        - **SD Card Images** (-sdcard.img) - Complete SD card images for Raspberry Pi
        
        ### Features
        - Multi-architecture support with optimized builds
        - AI subsystem support (configurable)
        - Cryptographic support
        - QEMU emulation support for testing
        - Docker container images
        
        ### Installation
        
        #### Raspberry Pi
        1. Download the appropriate SD card image for your Pi model
        2. Flash to SD card using tools like Raspberry Pi Imager
        3. Boot your Raspberry Pi
        
        #### x86_64 Systems
        1. Download the ISO image
        2. Create bootable USB or burn to CD/DVD
        3. Boot from the media
        
        #### Docker
        ```bash
        docker pull ghcr.io/${{ github.repository_owner }}/sage-os:${{ env.VERSION }}
        ```
        
        ### Verification
        Verify downloads using the provided SHA256SUMS file:
        ```bash
        sha256sum -c SHA256SUMS
        ```
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: SAGE OS ${{ env.VERSION }}
        body_path: release-notes.md
        files: |
          release-assets/*
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build status summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build-matrix
    if: always()

    steps:
    - name: Generate build summary
      run: |
        echo "# SAGE OS Multi-Architecture Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Build Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check build results
        if [ "${{ needs.build-matrix.result }}" == "success" ]; then
          echo "✅ **All builds completed successfully**" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.build-matrix.result }}" == "failure" ]; then
          echo "❌ **Some builds failed**" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Build status: ${{ needs.build-matrix.result }}**" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Kernel images for all supported architectures" >> $GITHUB_STEP_SUMMARY
        echo "- ISO images for x86_64 and aarch64" >> $GITHUB_STEP_SUMMARY
        echo "- SD card images for Raspberry Pi platforms" >> $GITHUB_STEP_SUMMARY
        echo "- Docker multi-arch images" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Download artifacts from the Actions tab" >> $GITHUB_STEP_SUMMARY
        echo "2. Test images on target hardware" >> $GITHUB_STEP_SUMMARY
        echo "3. Report any issues in the repository" >> $GITHUB_STEP_SUMMARY
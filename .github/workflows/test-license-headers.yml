name: Test License Headers

on:
  push:
    branches: [ main, origin, develop ]
  pull_request:
    branches: [ main, origin ]
  workflow_dispatch:

jobs:
  test-license-headers:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # No external dependencies needed for the license header tool
        
    - name: Test 1 - List supported file types
      run: |
        echo "=== Testing --list-supported ==="
        python3 enhanced_license_headers.py --list-supported
        
    - name: Test 2 - Dry run on entire project
      run: |
        echo "=== Testing --dry-run on entire project ==="
        python3 enhanced_license_headers.py --dry-run --verbose
        
    - name: Test 3 - Check existing headers
      run: |
        echo "=== Testing --check-only on files with headers ==="
        python3 enhanced_license_headers.py --dir test_files --check-only
        
    - name: Test 4 - Create test files without headers
      run: |
        echo "=== Creating test files without headers ==="
        mkdir -p test_workflow
        
        # Create various file types without headers
        echo 'print("Hello Python")' > test_workflow/test.py
        echo '#include <stdio.h>
        int main() { return 0; }' > test_workflow/test.c
        echo 'function test() { console.log("test"); }' > test_workflow/test.js
        echo 'name: test
        version: 1.0' > test_workflow/test.yaml
        echo '# Test Markdown
        This is a test.' > test_workflow/test.md
        echo 'This is plain text.' > test_workflow/test.txt
        echo 'SELECT * FROM users;' > test_workflow/test.sql
        echo '<!DOCTYPE html>
        <html><body>Test</body></html>' > test_workflow/test.html
        
    - name: Test 5 - Check files without headers (should fail)
      run: |
        echo "=== Testing --check-only on files without headers (should fail) ==="
        if python3 enhanced_license_headers.py --dir test_workflow --check-only; then
          echo "ERROR: Check should have failed for files without headers"
          exit 1
        else
          echo "SUCCESS: Check correctly identified missing headers"
        fi
        
    - name: Test 6 - Add headers to test files
      run: |
        echo "=== Testing header addition ==="
        python3 enhanced_license_headers.py --dir test_workflow --verbose
        
    - name: Test 7 - Verify headers were added
      run: |
        echo "=== Verifying headers were added ==="
        python3 enhanced_license_headers.py --dir test_workflow --check-only
        
    - name: Test 8 - Verify no duplicate headers
      run: |
        echo "=== Testing duplicate header prevention ==="
        # Run again - should not add duplicate headers
        python3 enhanced_license_headers.py --dir test_workflow --verbose
        
        # Check that headers weren't duplicated
        python3 enhanced_license_headers.py --dir test_workflow --check-only
        
    - name: Test 9 - Verify specific file formats
      run: |
        echo "=== Verifying specific file formats ==="
        
        # Check Python file has hash-style comments
        if grep -q "# SAGE OS" test_workflow/test.py; then
          echo "✓ Python file has correct hash-style header"
        else
          echo "✗ Python file missing hash-style header"
          exit 1
        fi
        
        # Check C file has C-style comments
        if grep -q "/\* SAGE OS" test_workflow/test.c; then
          echo "✓ C file has correct C-style header"
        else
          echo "✗ C file missing C-style header"
          exit 1
        fi
        
        # Check HTML file has HTML-style comments
        if grep -q "<!-- SAGE OS" test_workflow/test.html; then
          echo "✓ HTML file has correct HTML-style header"
        else
          echo "✗ HTML file missing HTML-style header"
          exit 1
        fi
        
        # Check SQL file has SQL-style comments
        if grep -q "-- SAGE OS" test_workflow/test.sql; then
          echo "✓ SQL file has correct SQL-style header"
        else
          echo "✗ SQL file missing SQL-style header"
          exit 1
        fi
        
        # Check text file has no comment markers
        if grep -q "^SAGE OS" test_workflow/test.txt; then
          echo "✓ Text file has correct plain header"
        else
          echo "✗ Text file missing plain header"
          exit 1
        fi
        
    - name: Test 10 - Test shebang preservation
      run: |
        echo "=== Testing shebang preservation ==="
        
        # Create Python file with shebang
        echo '#!/usr/bin/env python3
        print("Hello with shebang")' > test_workflow/shebang_test.py
        
        # Add header
        python3 enhanced_license_headers.py --dir test_workflow --verbose
        
        # Verify shebang is still first line
        if head -1 test_workflow/shebang_test.py | grep -q "#!/usr/bin/env python3"; then
          echo "✓ Shebang preserved correctly"
        else
          echo "✗ Shebang not preserved"
          head -5 test_workflow/shebang_test.py
          exit 1
        fi
        
        # Verify header comes after shebang
        if sed -n '2,10p' test_workflow/shebang_test.py | grep -q "# SAGE OS"; then
          echo "✓ Header correctly placed after shebang"
        else
          echo "✗ Header not found after shebang"
          head -10 test_workflow/shebang_test.py
          exit 1
        fi
        
    - name: Test 11 - Test exclusion patterns
      run: |
        echo "=== Testing exclusion patterns ==="
        
        # Create files that should be excluded
        echo "This is a README" > test_workflow/README.md
        echo "This is a license file" > test_workflow/LICENSE
        echo "node_modules content" > test_workflow/node_modules.txt
        
        # Run tool
        python3 enhanced_license_headers.py --dir test_workflow --verbose
        
        # Verify excluded files weren't modified
        if grep -q "SAGE OS" test_workflow/README.md; then
          echo "✗ README.md should have been excluded"
          exit 1
        else
          echo "✓ README.md correctly excluded"
        fi
        
        if grep -q "SAGE OS" test_workflow/LICENSE; then
          echo "✗ LICENSE should have been excluded"
          exit 1
        else
          echo "✓ LICENSE correctly excluded"
        fi
        
    - name: Test 12 - Performance test
      run: |
        echo "=== Performance test ==="
        
        # Create many test files
        mkdir -p test_workflow/perf_test
        for i in {1..50}; do
          echo "print('test $i')" > "test_workflow/perf_test/test_$i.py"
          echo "console.log('test $i')" > "test_workflow/perf_test/test_$i.js"
        done
        
        # Time the operation
        time python3 enhanced_license_headers.py --dir test_workflow/perf_test --verbose
        
        # Verify all files were processed
        processed_count=$(python3 enhanced_license_headers.py --dir test_workflow/perf_test --check-only 2>&1 | grep -c "All files have license headers" || echo "0")
        if [ "$processed_count" -eq 1 ]; then
          echo "✓ Performance test passed - all 100 files processed"
        else
          echo "✗ Performance test failed"
          exit 1
        fi
        
    - name: Test 13 - Error handling
      run: |
        echo "=== Testing error handling ==="
        
        # Test with non-existent directory
        if python3 enhanced_license_headers.py --dir non_existent_dir 2>&1 | grep -q "Error"; then
          echo "✓ Correctly handled non-existent directory"
        else
          echo "✗ Should have reported error for non-existent directory"
          exit 1
        fi
        
        # Test with file instead of directory
        touch test_workflow/single_file.txt
        if python3 enhanced_license_headers.py --dir test_workflow/single_file.txt 2>&1; then
          echo "✓ Handled file input gracefully"
        else
          echo "✗ Failed to handle file input"
          exit 1
        fi
        
    - name: Test 14 - Statistics verification
      run: |
        echo "=== Testing statistics ==="
        
        # Run on test directory and capture statistics
        output=$(python3 enhanced_license_headers.py --dir test_workflow --dry-run 2>&1)
        
        # Verify statistics are reported
        if echo "$output" | grep -q "Processing Statistics:"; then
          echo "✓ Statistics reported correctly"
        else
          echo "✗ Statistics not found in output"
          exit 1
        fi
        
        if echo "$output" | grep -q "Files processed:"; then
          echo "✓ File count statistics present"
        else
          echo "✗ File count statistics missing"
          exit 1
        fi
        
        if echo "$output" | grep -q "By comment style:"; then
          echo "✓ Comment style breakdown present"
        else
          echo "✗ Comment style breakdown missing"
          exit 1
        fi
        
    - name: Test Results Summary
      run: |
        echo "=== TEST RESULTS SUMMARY ==="
        echo "✓ All 14 test cases passed successfully!"
        echo "✓ License header tool is working correctly"
        echo "✓ All comment styles tested and verified"
        echo "✓ Error handling working properly"
        echo "✓ Performance acceptable for large file sets"
        echo "✓ Exclusion patterns working correctly"
        echo "✓ Shebang preservation working"
        echo "✓ Duplicate header prevention working"
        echo ""
        echo "The enhanced license header tool is ready for production use!"
        
    - name: Cleanup test files
      run: |
        echo "=== Cleaning up test files ==="
        rm -rf test_workflow
        echo "Cleanup completed"